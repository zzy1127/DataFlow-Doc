import{_ as t,c as a,b as o,o as i}from"./app-BqDkFDvD.js";const s={};function n(r,e){return i(),a("div",null,e[0]||(e[0]=[o('<h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><p>Function call data synthesis operators are designed to synthesize structured function call data from dialogues or real-world task descriptions. These operators cover scenario extraction and expansion, task generation and validation, function generation, and multi-agent multi-turn conversation generation.</p><p>All related operators are located in <a href="https://github.com/OpenDCAI/DataFlow/blob/main/dataflow/operators/conversations/func_call_operators.py" target="_blank" rel="noopener noreferrer">dataflow/operators/conversations/func_call_operators.py</a>. The table below summarizes their applicable scenarios:</p><table class="tg"><thead><tr><th class="tg-0pky">Name</th><th class="tg-0pky">Type</th><th class="tg-0pky">Description</th><th class="tg-0pky">Repo or Paper</th></tr></thead><tbody><tr><td class="tg-0pky">ScenarioExtractor</td><td class="tg-0pky">Scenario Extraction</td><td class="tg-0pky">Extracts scenario descriptions from conversations using LLM.</td><td class="tg-0pky" rowspan="8"><a href="https://github.com/PKU-Baichuan-MLSystemLab/BUTTON">Data</a><br><a href="https://arxiv.org/abs/2410.12952">Paper</a><br></td></tr><tr><td class="tg-0pky">ScenarioExpander</td><td class="tg-0pky">Scenario Expansion</td><td class="tg-0pky">Generates alternative scenarios based on original ones using LLM.</td></tr><tr><td class="tg-0pky">AtomTaskGenerator</td><td class="tg-0pky">Task Generation</td><td class="tg-0pky">Generates atomic tasks from scenario descriptions using LLM.</td></tr><tr><td class="tg-0pky">SequentialTaskGenerator</td><td class="tg-0pky">Task Generation</td><td class="tg-0pky">Generates subsequent tasks and composes them into sequential tasks.</td></tr><tr><td class="tg-0pky">ParaSeqTaskGenerator</td><td class="tg-0pky">Task Generation</td><td class="tg-0pky">Generates parallel and subsequent tasks and combines them with the original task.</td></tr><tr><td class="tg-0pky">CompositionTaskFilter</td><td class="tg-0pky">Task Filtering</td><td class="tg-0pky">Validates compositional tasks and filters out incomplete ones using LLM.</td></tr><tr><td class="tg-0pky">FunctionGenerator</td><td class="tg-0pky">Function Generation</td><td class="tg-0pky">Generates function definitions for a given task composition and its subtasks.</td></tr><tr><td class="tg-0pky">MultiTurnConversationGenerator</td><td class="tg-0pky">Dialogue Generation</td><td class="tg-0pky">Generates multi-turn conversations with User, Assistant, and Tool agents based on tasks and functions.</td></tr></tbody></table><h2 id="operator-details" tabindex="-1"><a class="header-anchor" href="#operator-details"><span>Operator Details</span></a></h2><h3 id="_1-scenarioextractor-âœ¨" tabindex="-1"><a class="header-anchor" href="#_1-scenarioextractor-âœ¨"><span>1. ScenarioExtractor âœ¨</span></a></h3><p><strong>Description:</strong><br> Extracts concise task scenario descriptions from dialogue using an LLM.</p><p><strong>Parameters:</strong></p><ul><li><code>__init__()</code><ul><li><code>llm_serving</code>: LLM interface instance</li></ul></li><li><code>run()</code><ul><li><code>storage</code>: data storage interface</li><li><code>input_chat_key</code>: field name for conversation input</li><li><code>output_key</code>: output field name (default: <code>&quot;scenario&quot;</code>)</li></ul></li></ul><p><strong>Highlights:</strong></p><ul><li>Strong contextual understanding</li><li>Forms basis for downstream task generation</li><li>Supports batch processing</li></ul><hr><h3 id="_2-scenarioexpander-âœ¨" tabindex="-1"><a class="header-anchor" href="#_2-scenarioexpander-âœ¨"><span>2. ScenarioExpander âœ¨</span></a></h3><p><strong>Description:</strong><br> Expands extracted task scenarios to generate varied alternatives via LLM.</p><p><strong>Parameters:</strong></p><ul><li><code>__init__()</code><ul><li><code>llm_serving</code>: LLM interface instance</li></ul></li><li><code>run()</code><ul><li><code>storage</code>: data storage interface</li><li><code>input_scenario_key</code>: field name of original scenario</li><li><code>output_key</code>: output field name (default: <code>&quot;modified_scenario&quot;</code>)</li></ul></li></ul><p><strong>Highlights:</strong></p><ul><li>Enhances scenario diversity</li><li>Useful for data augmentation</li></ul><hr><h3 id="_3-atomtaskgenerator-âœ¨" tabindex="-1"><a class="header-anchor" href="#_3-atomtaskgenerator-âœ¨"><span>3. AtomTaskGenerator âœ¨</span></a></h3><p><strong>Description:</strong><br> Generates fine-grained atomic tasks from a given scenario.</p><p><strong>Parameters:</strong></p><ul><li><code>__init__()</code><ul><li><code>llm_serving</code>: LLM interface instance</li></ul></li><li><code>run()</code><ul><li><code>storage</code>: data storage interface</li><li><code>input_scenario_key</code>: field name for scenario input</li><li><code>output_key</code>: output field name (default: <code>&quot;atom_task&quot;</code>)</li></ul></li></ul><p><strong>Highlights:</strong></p><ul><li>Atomic-level task granularity</li><li>Task decomposition from scenario</li></ul><hr><h3 id="_4-sequentialtaskgenerator-âœ¨" tabindex="-1"><a class="header-anchor" href="#_4-sequentialtaskgenerator-âœ¨"><span>4. SequentialTaskGenerator âœ¨</span></a></h3><p><strong>Description:</strong><br> Creates follow-up tasks and combines them with atomic tasks into a sequential flow.</p><p><strong>Parameters:</strong></p><ul><li><code>__init__()</code><ul><li><code>llm_serving</code>: LLM interface instance</li></ul></li><li><code>run()</code><ul><li><code>storage</code>: data storage interface</li><li><code>input_task_key</code>: field name for atomic task</li><li><code>output_subsequent_task_key</code>: subsequent task field (default: <code>&quot;subsequent_task&quot;</code>)</li><li><code>output_composition_task_key</code>: composed task field (default: <code>&quot;composition_task&quot;</code>)</li></ul></li></ul><p><strong>Highlights:</strong></p><ul><li>Supports multi-step task flow generation</li><li>Clear structure and traceability</li></ul><hr><h3 id="_5-paraseqtaskgenerator-âœ¨" tabindex="-1"><a class="header-anchor" href="#_5-paraseqtaskgenerator-âœ¨"><span>5. ParaSeqTaskGenerator âœ¨</span></a></h3><p><strong>Description:</strong><br> Generates parallel and sequential extensions for an atomic task and composes them into a complex task.</p><p><strong>Parameters:</strong></p><ul><li><code>__init__()</code><ul><li><code>llm_serving</code>: LLM interface instance</li></ul></li><li><code>run()</code><ul><li><code>storage</code>: data storage interface</li><li><code>input_task_key</code>: atomic task field</li><li><code>output_parallel_task_key</code>: parallel task field (default: <code>&quot;parallel_task&quot;</code>)</li><li><code>output_subsequent_task_key</code>: subsequent task field (default: <code>&quot;subsequent_task&quot;</code>)</li><li><code>output_composition_task_key</code>: composed task field (default: <code>&quot;composition_task&quot;</code>)</li></ul></li></ul><p><strong>Highlights:</strong></p><ul><li>Multi-dimensional task modeling</li><li>Captures concurrency and sequencing</li></ul><hr><h3 id="_6-compositiontaskfilter-âœ¨" tabindex="-1"><a class="header-anchor" href="#_6-compositiontaskfilter-âœ¨"><span>6. CompositionTaskFilter âœ¨</span></a></h3><p><strong>Description:</strong><br> Validates if a composed task is logically complete and executable. Filters invalid or incoherent compositions.</p><p><strong>Parameters:</strong></p><ul><li><code>__init__()</code><ul><li><code>llm_serving</code>: LLM interface instance</li></ul></li><li><code>run()</code><ul><li><code>storage</code>: data storage interface</li><li><code>input_composition_task_key</code>: composed task field</li><li><code>input_sub_tasks_keys</code>: list of subtask field names</li><li><code>output_key</code>: label field for executability (default: <code>&quot;runable_label&quot;</code>)</li></ul></li></ul><p><strong>Highlights:</strong></p><ul><li>Logical and semantic validation</li><li>Filters for downstream function generation</li></ul><hr><h3 id="_7-functiongenerator-âœ¨" tabindex="-1"><a class="header-anchor" href="#_7-functiongenerator-âœ¨"><span>7. FunctionGenerator âœ¨</span></a></h3><p><strong>Description:</strong><br> Generates structured function call specifications (name, parameters, doc) for a composed task and its subtasks.</p><p><strong>Parameters:</strong></p><ul><li><code>__init__()</code><ul><li><code>llm_serving</code>: LLM interface instance</li></ul></li><li><code>run()</code><ul><li><code>storage</code>: data storage interface</li><li><code>input_composition_task_key</code>: composed task field</li><li><code>input_sub_tasks_keys</code>: subtask field names</li><li><code>output_key</code>: output field for functions (default: <code>&quot;functions&quot;</code>)</li></ul></li></ul><p><strong>Highlights:</strong></p><ul><li>LLM-based function synthesis</li><li>Designed for tool/agent integration</li><li>Structured JSON-like output</li></ul><hr><h3 id="_8-multiturnconversationgenerator-âœ¨ðŸš€" tabindex="-1"><a class="header-anchor" href="#_8-multiturnconversationgenerator-âœ¨ðŸš€"><span>8. MultiTurnConversationGenerator âœ¨ðŸš€</span></a></h3><p><strong>Description:</strong><br> Simulates multi-turn conversations involving User, Assistant, and Tool agents to complete the composed task via function calls.</p><p><strong>Parameters:</strong></p><ul><li><code>__init__()</code><ul><li><code>llm_serving</code>: LLM interface instance</li></ul></li><li><code>run()</code><ul><li><code>storage</code>: data storage interface</li><li><code>input_task_key</code>: composed task field</li><li><code>input_sub_tasks_keys</code>: list of subtask fields</li><li><code>input_functions_key</code>: field name for function list</li><li><code>output_conversations_key</code>: output field for conversations (default: <code>&quot;conversations&quot;</code>)</li></ul></li></ul><p><strong>Highlights:</strong></p><ul><li>Multi-agent interactive generation</li><li>Supports function call injection</li><li>Up to 5 full interaction rounds</li></ul><hr><p>For code examples, refer to the <a href="https://opendcai.github.io/DataFlow-Doc/en/guide/e6kz1s79/" target="_blank" rel="noopener noreferrer">Function Call Data Synthesis Pipeline</a> or the <a href="https://github.com/OpenDCAI/DataFlow/blob/main/dataflow/operators/conversations/func_call_operators.py" target="_blank" rel="noopener noreferrer">GitHub source file</a>.</p>',62)]))}const c=t(s,[["render",n]]),d=JSON.parse('{"path":"/en/guide/qdq6vy95/","title":"Function Call Data Synthesis Operators","lang":"en-US","frontmatter":{"title":"Function Call Data Synthesis Operators","createTime":"2025/07/20 21:50:53","permalink":"/en/guide/qdq6vy95/"},"readingTime":{"minutes":2.79,"words":837},"git":{"createdTime":1753082806000,"updatedTime":1753082806000,"contributors":[{"name":"MOLYHECI","username":"MOLYHECI","email":"molyheci@outlook.com","commits":1,"avatar":"https://avatars.githubusercontent.com/MOLYHECI?v=4","url":"https://github.com/MOLYHECI"}]},"filePathRelative":"en/notes/guide/domain_specific_operators/funccall_operators.md","headers":[]}');export{c as comp,d as data};
