import{_ as e,c as o,b as l,o as a}from"./app-BqDkFDvD.js";const i={};function s(r,t){return a(),o("div",null,t[0]||(t[0]=[l('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>函数调用数据合成算子是专门用于从对话或现实场景合成函数调用数据的算子集合，这些算子主要包括了真实任务场景的提取和生成，任务的生成与验证，函数生成，多智能体多轮对话生成等功能。这些算子位于<a href="https://github.com/OpenDCAI/DataFlow/blob/main/dataflow/operators/conversations/func_call_operators.py" target="_blank" rel="noopener noreferrer">dataflow/operators/conversations/func_call_operators.py</a>文件中，其适用场景可以参考下面的表格：</p><table class="tg"><thead><tr><th class="tg-0pky">名称</th><th class="tg-0pky">适用类型</th><th class="tg-0pky">简介</th><th class="tg-0pky">官方仓库或论文</th></tr></thead><tbody><tr><td class="tg-0pky">ScenarioExtractor</td><td class="tg-0pky">场景提取</td><td class="tg-0pky">从对话内容中提取场景信息，使用LLM服务分析对话并生成场景描述。</td><td class="tg-0pky" rowspan="8"><a href="https://github.com/PKU-Baichuan-MLSystemLab/BUTTON">Data</a><br><a href="https://arxiv.org/abs/2410.12952">Paper</a><br></td></tr><tr><td class="tg-0pky">ScenarioExpander</td><td class="tg-0pky">场景扩展</td><td class="tg-0pky">基于原始场景生成新的替代场景，使用LLM服务重写或改写原有场景内容。</td></tr><tr><td class="tg-0pky">AtomTaskGenerator</td><td class="tg-0pky">任务生成</td><td class="tg-0pky">根据输入的场景信息，使用LLM服务生成对应的原子任务。</td></tr><tr><td class="tg-0pky">SequentialTaskGenerator</td><td class="tg-0pky">任务生成</td><td class="tg-0pky">根据输入的原子任务，使用LLM服务生成该任务的后继任务和两者的组合任务。</td></tr><tr><td class="tg-0pky">ParaSeqTaskGenerator</td><td class="tg-0pky">任务生成</td><td class="tg-0pky">基于原子任务，使用LLM服务生成三个任务类型：并行任务、后继任务以及这三者的组合任务。</td></tr><tr><td class="tg-0pky">CompositionTaskFilter</td><td class="tg-0pky">任务过滤</td><td class="tg-0pky">根据组合任务及其子任务，使用LLM服务判断组合任务是否具备可行性与完备性，从而进行可运行任务的筛选。</td></tr><tr><td class="tg-0pky">FunctionGenerator</td><td class="tg-0pky">函数生成</td><td class="tg-0pky">基于组合任务及其相关子任务，使用LLM服务生成对应的函数列表，</td></tr><tr><td class="tg-0pky">MultiTurnConversationGenerator</td><td class="tg-0pky">多轮对话生成</td><td class="tg-0pky">根据组合任务及其子任务函数，使用LLM服务模拟多轮对话过程，由User、Assistant和Tool三个Agent协同生成完整的对话数据。</td></tr></tbody></table><h2 id="详细算子说明" tabindex="-1"><a class="header-anchor" href="#详细算子说明"><span>详细算子说明</span></a></h2><h3 id="_1-scenarioextractor" tabindex="-1"><a class="header-anchor" href="#_1-scenarioextractor"><span>1. ScenarioExtractor</span></a></h3><p><strong>功能描述：</strong><br> 从对话内容中提取任务场景信息，借助大语言模型分析对话背景，生成简洁准确的场景描述。</p><p><strong>输入参数：</strong></p><ul><li><code>__init__()</code><ul><li><code>llm_serving</code>：LLM服务接口对象</li></ul></li><li><code>run()</code><ul><li><code>storage</code>：数据存储对象</li><li><code>input_chat_key</code>：对话内容字段名</li><li><code>output_key</code>：场景输出字段名（默认：&quot;scenario&quot;）</li></ul></li></ul><p><strong>主要特性：</strong></p><ul><li>对话理解与摘要能力强</li><li>场景可作为下游任务生成基础</li><li>可批量处理多轮对话数据</li></ul><hr><h3 id="_2-scenarioexpander" tabindex="-1"><a class="header-anchor" href="#_2-scenarioexpander"><span>2. ScenarioExpander</span></a></h3><p><strong>功能描述：</strong><br> 对提取出的任务场景进行扩展，生成新的、风格或内容有所差异的任务背景，以丰富数据集多样性。</p><p><strong>输入参数：</strong></p><ul><li><code>__init__()</code><ul><li><code>llm_serving</code>：LLM服务接口对象</li></ul></li><li><code>run()</code><ul><li><code>storage</code>：数据存储对象</li><li><code>input_scenario_key</code>：原始场景字段名</li><li><code>output_key</code>：扩展场景字段名（默认：&quot;modified_scenario&quot;）</li></ul></li></ul><p><strong>主要特性：</strong></p><ul><li>任务背景多样性增强</li></ul><hr><h3 id="_3-atomtaskgenerator" tabindex="-1"><a class="header-anchor" href="#_3-atomtaskgenerator"><span>3. AtomTaskGenerator</span></a></h3><p><strong>功能描述：</strong><br> 根据场景信息生成原子任务，每个任务是可独立执行的最小功能单元，供后续任务串联与合成使用。</p><p><strong>输入参数：</strong></p><ul><li><code>__init__()</code><ul><li><code>llm_serving</code>：LLM服务接口对象</li></ul></li><li><code>run()</code><ul><li><code>storage</code>：数据存储对象</li><li><code>input_scenario_key</code>：场景字段名</li><li><code>output_key</code>：原子任务字段名（默认：&quot;atom_task&quot;）</li></ul></li></ul><p><strong>主要特性：</strong></p><ul><li>精细粒度，原子化任务生成</li></ul><hr><h3 id="_4-sequentialtaskgenerator" tabindex="-1"><a class="header-anchor" href="#_4-sequentialtaskgenerator"><span>4. SequentialTaskGenerator</span></a></h3><p><strong>功能描述：</strong><br> 为每个原子任务生成其后继任务，并组合成顺序执行的复合任务，支持流程化任务设计。</p><p><strong>输入参数：</strong></p><ul><li><code>__init__()</code><ul><li><code>llm_serving</code>：LLM服务接口对象</li></ul></li><li><code>run()</code><ul><li><code>storage</code>：数据存储对象</li><li><code>input_task_key</code>：原子任务字段名</li><li><code>output_subsequent_task_key</code>：后继任务字段名（默认：&quot;subsequent_task&quot;）</li><li><code>output_composition_task_key</code>：组合任务字段名（默认：&quot;composition_task&quot;）</li></ul></li></ul><p><strong>主要特性：</strong></p><ul><li>支持任务链自动构造</li><li>多任务依赖管理基础</li><li>输出结构清晰、可追溯</li></ul><hr><h3 id="_5-paraseqtaskgenerator" tabindex="-1"><a class="header-anchor" href="#_5-paraseqtaskgenerator"><span>5. ParaSeqTaskGenerator</span></a></h3><p><strong>功能描述：</strong><br> 在原子任务基础上生成对应的并行任务和后继任务，并将三者组合为复合任务，适用于复杂流程建模。</p><p><strong>输入参数：</strong></p><ul><li><code>__init__()</code><ul><li><code>llm_serving</code>：LLM服务接口对象</li></ul></li><li><code>run()</code><ul><li><code>storage</code>：数据存储对象</li><li><code>input_task_key</code>：原子任务字段名</li><li><code>output_parallel_task_key</code>：并行任务字段名（默认：&quot;parallel_task&quot;）</li><li><code>output_subsequent_task_key</code>：后继任务字段名（默认：&quot;subsequent_task&quot;）</li><li><code>output_composition_task_key</code>：组合任务字段名（默认：&quot;composition_task&quot;）</li></ul></li></ul><p><strong>主要特性：</strong></p><ul><li>三维任务结构自动生成</li><li>支持并发与依赖协同</li><li>更强任务组合表达力</li></ul><hr><h3 id="_6-compositiontaskfilter" tabindex="-1"><a class="header-anchor" href="#_6-compositiontaskfilter"><span>6. CompositionTaskFilter</span></a></h3><p><strong>功能描述：</strong><br> 对组合任务及其子任务的结构合理性与可执行性进行评估，过滤掉不完整或不合理的任务组合。</p><p><strong>输入参数：</strong></p><ul><li><code>__init__()</code><ul><li><code>llm_serving</code>：LLM服务接口对象</li></ul></li><li><code>run()</code><ul><li><code>storage</code>：数据存储对象</li><li><code>input_composition_task_key</code>：组合任务字段名</li><li><code>input_sub_tasks_keys</code>：子任务字段名列表（如原子任务、后继任务）</li><li><code>output_key</code>：可执行标识字段（默认：&quot;runable_label&quot;）</li></ul></li></ul><p><strong>主要特性：</strong></p><ul><li>精准识别无效任务组合</li><li>输出可直接用于下游函数生成</li></ul><hr><h3 id="_7-functiongenerator" tabindex="-1"><a class="header-anchor" href="#_7-functiongenerator"><span>7. FunctionGenerator</span></a></h3><p><strong>功能描述：</strong><br> 根据组合任务及其子任务结构，自动生成对应的函数列表，每个函数模拟实际系统中的调用模块。</p><p><strong>输入参数：</strong></p><ul><li><code>__init__()</code><ul><li><code>llm_serving</code>：LLM服务接口对象</li></ul></li><li><code>run()</code><ul><li><code>storage</code>：数据存储对象</li><li><code>input_composition_task_key</code>：组合任务字段名</li><li><code>input_sub_tasks_keys</code>：子任务字段名列表</li><li><code>output_key</code>：函数输出字段名（默认：&quot;functions&quot;）</li></ul></li></ul><p><strong>主要特性：</strong></p><ul><li>面向工具调用场景设计</li><li>支持函数名、参数与注释生成</li><li>结构化输出易集成</li></ul><hr><h3 id="_8-multiturnconversationgenerator" tabindex="-1"><a class="header-anchor" href="#_8-multiturnconversationgenerator"><span>8. MultiTurnConversationGenerator</span></a></h3><p><strong>功能描述：</strong><br> 利用组合任务与函数信息，在用户（User）、助手（Assistant）、工具（Tool）三方协作下，生成结构合理的多轮函数调用对话。</p><p><strong>输入参数：</strong></p><ul><li><code>__init__()</code><ul><li><code>llm_serving</code>：LLM服务接口对象</li></ul></li><li><code>run()</code><ul><li><code>storage</code>：数据存储对象</li><li><code>input_task_key</code>：组合任务字段名</li><li><code>input_sub_tasks_keys</code>：子任务字段名列表</li><li><code>input_functions_key</code>：函数字段名</li><li><code>output_conversations_key</code>：输出对话字段名（默认：&quot;conversations&quot;）</li></ul></li></ul><p><strong>主要特性：</strong></p><ul><li>多智能体对话模拟</li><li>支持函数嵌入与调用结构</li></ul><p>算子的示例代码请参考文档<a href="https://opendcai.github.io/DataFlow-Doc/zh/guide/hy4417i0/" target="_blank" rel="noopener noreferrer">函数调用数据合成流水线</a>或<a href="https://github.com/OpenDCAI/DataFlow/blob/main/dataflow/operators/conversations/func_call_operators.py" target="_blank" rel="noopener noreferrer">GitHub仓库</a></p>',60)]))}const c=e(i,[["render",s]]),d=JSON.parse('{"path":"/zh/guide/kgdzd34m/","title":"函数调用数据合成算子","lang":"zh-CN","frontmatter":{"title":"函数调用数据合成算子","createTime":"2025/07/20 21:09:11","permalink":"/zh/guide/kgdzd34m/"},"readingTime":{"minutes":5.54,"words":1661},"git":{"createdTime":1753082806000,"updatedTime":1753082806000,"contributors":[{"name":"MOLYHECI","username":"MOLYHECI","email":"molyheci@outlook.com","commits":1,"avatar":"https://avatars.githubusercontent.com/MOLYHECI?v=4","url":"https://github.com/MOLYHECI"}]},"filePathRelative":"zh/notes/guide/domain_specific_operators/funccall_operators.md","headers":[]}');export{c as comp,d as data};
