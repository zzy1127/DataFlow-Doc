import{_ as e,c as a,b as i,o as s}from"./app-BqDkFDvD.js";const l={};function n(r,t){return s(),a("div",null,t[0]||(t[0]=[i('<h2 id="📘-概述" tabindex="-1"><a class="header-anchor" href="#📘-概述"><span>📘 概述</span></a></h2><p><a href="https://github.com/OpenDCAI/DataFlow/blob/main/dataflow/operators/filter/code_file_type_content_filter.py" target="_blank" rel="noopener noreferrer">CodeFileTypeContentFilter</a> 是一个基于文件类型和内容特征过滤代码样本的算子。它针对不同的文件格式（如文本、JSON、HTML等）应用特定的硬编码规则，以确保数据的质量和相关性。例如，该算子会移除行数过多的文本文件、可见文本内容不足的HTML文件或文件名不符合文档规范的文本文件。</p><h2 id="init-函数" tabindex="-1"><a class="header-anchor" href="#init-函数"><span>__init__函数</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> __init__</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="init参数说明" tabindex="-1"><a class="header-anchor" href="#init参数说明"><span>init参数说明</span></a></h3><p>该函数没有参数。</p><h2 id="run函数" tabindex="-1"><a class="header-anchor" href="#run函数"><span>run函数</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">storage</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> input_key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> output_key</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">file_type_content_filter_label</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行算子主逻辑，从存储中读取输入 DataFrame，根据文件类型和内容特征进行过滤，并将过滤后的结果写回存储。</p><h4 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">默认值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>storage</strong></td><td style="text-align:left;">DataFlowStorage</td><td style="text-align:left;">必需</td><td style="text-align:left;">数据流存储实例，负责读取与写入数据。</td></tr><tr><td style="text-align:left;"><strong>input_key</strong></td><td style="text-align:left;">str</td><td style="text-align:left;">必需</td><td style="text-align:left;">输入字段名。此算子要求输入的DataFrame中必须包含 &#39;filetype&#39;、&#39;filename&#39;、&#39;line_count&#39; 等特定列。</td></tr><tr><td style="text-align:left;"><strong>output_key</strong></td><td style="text-align:left;">str</td><td style="text-align:left;">&quot;file_type_content_filter_label&quot;</td><td style="text-align:left;">输出标签的列名，用于标记数据是否通过过滤。该列会被添加到过滤前的DataFrame中，最终输出的DataFrame仅包含通过过滤的行。</td></tr></tbody></table><h2 id="🧠-示例用法" tabindex="-1"><a class="header-anchor" href="#🧠-示例用法"><span>🧠 示例用法</span></a></h2><h2 id="🧾-默认输出格式-output-format" tabindex="-1"><a class="header-anchor" href="#🧾-默认输出格式-output-format"><span>🧾 默认输出格式（Output Format）</span></a></h2><p>算子执行后，会返回一个被过滤后的 DataFrame。输出的数据保留了通过筛选的行的所有原始列，并新增了一个由 <code>output_key</code> 指定的标签列。</p><table><thead><tr><th style="text-align:left;">字段</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>[input_columns]</code></td><td style="text-align:left;">any</td><td style="text-align:left;">输入数据中包含的所有原始列。</td></tr><tr><td style="text-align:left;"><code>file_type_content_filter_label</code> (或<code>output_key</code>值)</td><td style="text-align:left;">int</td><td style="text-align:left;">过滤标签，值为1表示该行数据通过了过滤规则。</td></tr></tbody></table>',15)]))}const h=e(l,[["render",n]]),o=JSON.parse('{"path":"/zh/api/operators/code/filter/codefiletypecontentfilter/","title":"CodeFileTypeContentFilter","lang":"zh-CN","frontmatter":{"title":"CodeFileTypeContentFilter","createTime":"2025/10/09 17:09:04","permalink":"/zh/api/operators/code/filter/codefiletypecontentfilter/"},"readingTime":{"minutes":1.37,"words":411},"git":{"createdTime":1760001305000,"updatedTime":1760001305000,"contributors":[{"name":"Hao Liang","username":"","email":"hao.liang@stu.pku.edu.cn","commits":1,"avatar":"https://gravatar.com/avatar/105bae3e8661728b9f2f5440992b04f5f28459b66a049d09b52213ce1438f6bc?d=retro"}]},"filePathRelative":"zh/notes/api/operators/code/filter/CodeFileTypeContentFilter.md","headers":[]}');export{h as comp,o as data};
