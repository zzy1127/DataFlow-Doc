import{_ as e,c as a,b as i,o as s}from"./app-BqDkFDvD.js";const l={};function n(d,t){return s(),a("div",null,t[0]||(t[0]=[i('<p>好的，这是根据您提供的代码和模板生成的 <code>CodeTextCompositionSampleEvaluator</code> 算子的教程 Markdown。</p><hr><h2 id="📘-概述" tabindex="-1"><a class="header-anchor" href="#📘-概述"><span>📘 概述</span></a></h2><p><code>CodeTextCompositionSampleEvaluator</code> 是一个代码文本组成样本评估算子，它基于字符组成来评估代码样本，旨在过滤掉二进制文件、加密内容或其他不可读的文本。该算子通过分析字母字符和字母数字字符的比例来确保内容的可读性。</p><h2 id="init-函数" tabindex="-1"><a class="header-anchor" href="#init-函数"><span>__init__函数</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> __init__</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="init参数说明" tabindex="-1"><a class="header-anchor" href="#init参数说明"><span>init参数说明</span></a></h3><p>该函数在初始化时无需传入参数。</p><h2 id="run函数" tabindex="-1"><a class="header-anchor" href="#run函数"><span>run函数</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> storage</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> DataFlowStorage</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> input_key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">默认值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>storage</strong></td><td style="text-align:left;">DataFlowStorage</td><td style="text-align:left;">必需</td><td style="text-align:left;">数据流存储实例，负责读取与写入数据。</td></tr><tr><td style="text-align:left;"><strong>input_key</strong></td><td style="text-align:left;">str</td><td style="text-align:left;">必需</td><td style="text-align:left;">输入列名，该列数据应为包含代码的文本字符串或包含 &#39;text&#39; 和 &#39;language&#39; 键的字典。</td></tr></tbody></table><h2 id="🧠-示例用法" tabindex="-1"><a class="header-anchor" href="#🧠-示例用法"><span>🧠 示例用法</span></a></h2><h4 id="🧾-默认输出格式-output-format" tabindex="-1"><a class="header-anchor" href="#🧾-默认输出格式-output-format"><span>🧾 默认输出格式（Output Format）</span></a></h4><p>该算子会向原始数据中添加以下三个评分字段：</p><table><thead><tr><th style="text-align:left;">字段</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">CodeTextCompositionAlphaRatio</td><td style="text-align:left;">float</td><td style="text-align:left;">文本中字母字符的比例。</td></tr><tr><td style="text-align:left;">CodeTextCompositionAlnumRatio</td><td style="text-align:left;">float</td><td style="text-align:left;">文本中字母和数字字符的总比例。</td></tr><tr><td style="text-align:left;">CodeTextCompositionScore</td><td style="text-align:left;">float</td><td style="text-align:left;">综合字符组成得分 (0.0 或 1.0)，1.0 表示通过检查。</td></tr></tbody></table>',16)]))}const r=e(l,[["render",n]]),o=JSON.parse('{"path":"/zh/api/operators/code/eval/codetextcompositionsampleevaluator/","title":"CodeTextCompositionSampleEvaluator","lang":"zh-CN","frontmatter":{"title":"CodeTextCompositionSampleEvaluator","createTime":"2025/10/09 17:09:04","permalink":"/zh/api/operators/code/eval/codetextcompositionsampleevaluator/"},"readingTime":{"minutes":1.02,"words":307},"git":{"createdTime":1760001305000,"updatedTime":1760001305000,"contributors":[{"name":"Hao Liang","username":"","email":"hao.liang@stu.pku.edu.cn","commits":1,"avatar":"https://gravatar.com/avatar/105bae3e8661728b9f2f5440992b04f5f28459b66a049d09b52213ce1438f6bc?d=retro"}]},"filePathRelative":"zh/notes/api/operators/code/eval/CodeTextCompositionSampleEvaluator.md","headers":[]}');export{r as comp,o as data};
