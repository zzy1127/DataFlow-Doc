import{_ as d,c as i,b as l,a,d as s,e as r,w as p,r as n,o as c}from"./app-BqDkFDvD.js";const h={};function g(k,t){const e=n("VPLink");return c(),i("div",null,[t[3]||(t[3]=l(`<h2 id="概览" tabindex="-1"><a class="header-anchor" href="#概览"><span>概览</span></a></h2><p>DataFlow目前支持的文本数据处理主要针对于数据点层面，可以分为以下三种类型，分别是数据改写器、数据去重器和数据过滤器。</p><table class="tg"><thead><tr><th class="tg-0pky">类型</th><th class="tg-0pky">数量</th><th class="tg-0pky">描述</th></tr></thead><tbody><tr><td class="tg-0pky">数据改写器</td><td class="tg-0pky">16</td><td class="tg-0pky">通过数据处理、数据增强等方式改善数据点内容（不改变总数量）</td></tr><tr><td class="tg-0pky">数据去重器</td><td class="tg-0pky">6</td><td class="tg-0pky">通过哈希等方法进行数据点去重</td></tr><tr><td class="tg-0pky">数据过滤器</td><td class="tg-0pky">42</td><td class="tg-0pky">通过设置阈值等方式过滤数据点</td></tr></tbody></table><h2 id="数据改写器" tabindex="-1"><a class="header-anchor" href="#数据改写器"><span>数据改写器</span></a></h2><table class="tg"><thead><tr><th class="tg-0pky">名称</th><th class="tg-0pky">适用类型</th><th class="tg-0pky">简介</th><th class="tg-0pky">官方仓库或论文</th></tr></thead><tbody><tr><td class="tg-0pky">CondorRefiner</td><td class="tg-0pky">SFT</td><td class="tg-0pky">利用大模型API生成对SFT回复的评价并改写，提升QA对质量</td><td class="tg-0pky"><a href="https://arxiv.org/pdf/2501.12273">paper</a></td></tr><tr><td class="tg-0pky">LowercaseRefiner</td><td class="tg-0pky">NLP</td><td class="tg-0pky">将文本字段中的内容转换为小写</td><td class="tg-0pky">-</td></tr><tr><td class="tg-0pky">PIIAnonymizeRefiner</td><td class="tg-0pky">预训练</td><td class="tg-0pky">通过识别和匿名化个人身份信息（PII），如姓名、位置等，来保护隐私</td><td class="tg-0pky"><a href="https://github.com/microsoft/presidio">Code</a></td></tr><tr><td class="tg-0pky">RemovePunctuationRefiner</td><td class="tg-0pky">NLP</td><td class="tg-0pky">移除文本中的标点符号</td><td class="tg-0pky">-</td></tr><tr><td class="tg-0pky">RemoveNumberRefiner</td><td class="tg-0pky">NLP</td><td class="tg-0pky">移除文本中的数字字符</td><td class="tg-0pky">-</td></tr><tr><td class="tg-0pky">RemoveExtraSpacesRefiner</td><td class="tg-0pky">NLP、预训练</td><td class="tg-0pky">移除文本中的多余空格，将连续的多个空格替换为单个空格，并去除文本前后空格</td><td class="tg-0pky">-</td></tr><tr><td class="tg-0pky">RemoveRepetitionsPunctuationRefiner</td><td class="tg-0pky">NLP</td><td class="tg-0pky">移除重复的标点符号，例如“!!!”变为“!”</td><td class="tg-0pky">-</td></tr><tr><td class="tg-0pky">RemoveEmojiRefiner</td><td class="tg-0pky">预训练</td><td class="tg-0pky">移除文本中的表情符号，例如&quot;😀&quot;</td><td class="tg-0pky"><a href="https://gist.github.com/slowkow/7a7f61f495e3dbb7e3d767f97bd7304b">Code</a></td></tr><tr><td class="tg-0pky">RemoveEmoticonsRefiner</td><td class="tg-0pky">预训练</td><td class="tg-0pky">移除文本中的表情符号，例如“:‑)”，使用预定义的表情符号列表</td><td class="tg-0pky"><a href="https://github.com/NeelShah18/emot/blob/master/emot/emo_unicode.py">Code</a></td></tr><tr><td class="tg-0pky">RemoveContractionsRefiner</td><td class="tg-0pky">NLP</td><td class="tg-0pky">扩展文本中的缩写词（例如将“can&#39;t”扩展为“cannot”）</td><td class="tg-0pky"><a href="https://github.com/kootenpv/contractions">Code</a></td></tr><tr><td class="tg-0pky">HtmlUrlRemoverRefiner</td><td class="tg-0pky">预训练</td><td class="tg-0pky">移除文本中的URL和HTML标签</td><td class="tg-0pky">-</td></tr><tr><td class="tg-0pky">TextNormalizationRefiner</td><td class="tg-0pky">NLP</td><td class="tg-0pky">规范化文本中的日期格式、货币格式等</td><td class="tg-0pky">-</td></tr><tr><td class="tg-0pky">NERRefiner</td><td class="tg-0pky">NLP</td><td class="tg-0pky">使用命名实体识别（NER）技术识别并屏蔽文本中的特定实体</td><td class="tg-0pky"><a href="https://spacy.io/usage/linguistic-features#named-entities">Code</a></td></tr><tr><td class="tg-0pky">StemmingLemmatizationRefiner</td><td class="tg-0pky">NLP</td><td class="tg-0pky">对文本进行词干提取或词形还原</td><td class="tg-0pky"><a href="https://www.nltk.org/">Code</a></td></tr><tr><td class="tg-0pky">SpellingCorrectionRefiner</td><td class="tg-0pky">NLP、预训练</td><td class="tg-0pky">通过SymSpell对文本中的拼写错误进行纠正</td><td class="tg-0pky"><a href="https://github.com/mammothb/symspellpy">Code</a></td></tr><tr><td class="tg-0pky">RemoveStopwordsRefiner</td><td class="tg-0pky">NLP</td><td class="tg-0pky">移除文本中的停用词（如“the”，“is”）</td><td class="tg-0pky"><a href="https://github.com/nltk/nltk">Code</a></td></tr></tbody></table><h2 id="数据去重器" tabindex="-1"><a class="header-anchor" href="#数据去重器"><span>数据去重器</span></a></h2><table class="tg"><thead><tr><th class="tg-0pky">名称</th><th class="tg-0pky">类别</th><th class="tg-0pky">简介</th><th class="tg-0pky">官方仓库或论文</th></tr></thead><tbody><tr><td class="tg-0pky">HashDeduplicator</td><td class="tg-0pky">精确去重</td><td class="tg-0pky">使用多种哈希函数（如MD5、SHA256、XXH3_128）对文本进行哈希处理，通过精确的比较哈希值来识别和移除重复数据，适用于小规模简单去重场景。</td><td class="tg-0pky">-</td></tr><tr><td class="tg-0pky">CCNetDeduplicator</td><td class="tg-0pky">精确去重</td><td class="tg-0pky">基于SHA-1哈希算法的前64位进行比较，以识别重复文本。旨在平衡哈希安全性和计算效率。</td><td class="tg-0pky">-</td></tr><tr><td class="tg-0pky">NgramHashDeduplicator</td><td class="tg-0pky">近似去重</td><td class="tg-0pky">结合n-gram技术与哈希算法，将文本分割为多个n-gram片段并分别进行哈希处理。通过多个哈希值的比较来识别相似或重复的文本，适用于处理具有细微差异的重复数据。</td><td class="tg-0pky"><a href="https://arxiv.org/abs/1607.04606">Paper</a></td></tr><tr><td class="tg-0pky">SemDeduplicator</td><td class="tg-0pky">近似去重</td><td class="tg-0pky">基于BERT模型的语义相似度计算，通过生成文本的嵌入向量并计算余弦相似度来识别重复内容。适用于需要语义理解的高级去重场景，能够识别语义上相似但表述不同的文本。</td><td class="tg-0pky"><a href="https://arxiv.org/abs/1810.04805">Paper</a> <br> <a href="https://github.com/facebookresearch/SemDeDup">Code</a></td></tr><tr><td class="tg-0pky">SimHashDeduplicator</td><td class="tg-0pky">近似去重</td><td class="tg-0pky">采用SimHash算法，通过生成文本的SimHash指纹并计算汉明距离来判断文本的相似度。适用于高效的相似文本检测，能够快速处理大规模数据集中的重复或相似文本。</td><td class="tg-0pky"><a href="https://dl.acm.org/doi/abs/10.1145/1242572.1242592">Paper</a></td></tr><tr><td class="tg-0pky">MinHashDeduplicator</td><td class="tg-0pky">近似去重</td><td class="tg-0pky">结合MinHash与LSH，通过将集合中的元素哈希成一个较小的签名（通常是一个固定长度的整数或比特串），从而以很小的内存占用和低计算成本比较两个集合之间的相似度。</td><td class="tg-0pky"><a href="https://arxiv.org/abs/1811.04633">Paper</a></td></tr></tbody></table><h2 id="数据过滤器" tabindex="-1"><a class="header-anchor" href="#数据过滤器"><span>数据过滤器</span></a></h2><table class="tg"><thead><tr><th class="tg-0pky">名称</th><th class="tg-0pky">适用类型</th><th class="tg-0pky">简介</th><th class="tg-0pky">官方仓库或论文</th></tr></thead><tbody><tr><td class="tg-0pky">GeneralFilter</td><td class="tg-0pky">任意Dataframe</td><td class="tg-0pky">支持通过一/多个自定义lambda函数对 DataFrame 进行灵活过滤</td><td class="tg-0pky"> - </td></tr><tr><td class="tg-0pky">LanguageFilter</td><td class="tg-0pky">预训练、SFT</td><td class="tg-0pky">使用fasttext语言识别模型过滤特定语言</td><td class="tg-0pky"><a href="https://huggingface.co/facebook/fasttext-language-identification">Huggingface</a></td></tr><tr><td class="tg-0pky">BlocklistFilter</td><td class="tg-0pky">预训练、SFT</td><td class="tg-0pky">设置阈值，根据List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words屏蔽词表过滤数据点</td><td class="tg-0pky"><a href="https://github.com/LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words?tab=readme-ov-file">Code</a></td></tr></tbody></table><p>同时，作为配套工作，我们支持了Open-DataFlow-Eval文本数据评估模块中基于单个数据点打分器评分的过滤。共18种。</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">DeitaQualityFilter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    min_score</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                                         </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    max_score</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                                     </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    scorer_args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">      device</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">cuda:0</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">      model_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hkust-nlp/deita-quality-scorer</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">      max_length</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 512</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可通过设置需要保留的<code>min/max</code>分数并在<code>scorer_args</code>中设置打分器参数实现。</p>`,12)),a("p",null,[t[1]||(t[1]=s("支持的打分器，详见")),r(e,{href:"/zh/guide/text_evaluation_operators/"},{default:p(()=>t[0]||(t[0]=[s("评估算法文档")])),_:1,__:[0]}),t[2]||(t[2]=s("（除Diversity部分）。"))]),t[4]||(t[4]=a("p",null,[s("此外，启发式规则过滤在预训练数据的筛选方面占有很大的比重，在这一方面，"),a("a",{href:"https://github.com/DataEval/dingo",target:"_blank",rel:"noopener noreferrer"},"Dingo数据质量评估工具"),s("对我们的开发带来了很大的启发。我们在"),a("code",null,"dataflow/operators/filter/GeneralText/heuristics.py"),s("中整合了部分Dingo中使用的规则过滤算法，共22种。详见"),a("a",{href:"https://github.com/DataEval/dingo/blob/dev/docs/rules.md",target:"_blank",rel:"noopener noreferrer"},"规则文档"),s("，过滤器名称可参考"),a("code",null,"dataflow/operators/filter/GeneralText/heuristics.py"),s("文件。")],-1)),t[5]||(t[5]=a("p",null,[s("需要说明的是，以上提到的42种数据过滤器具有相同的"),a("code",null,"Yaml"),s("调用方式。")],-1))])}const y=d(h,[["render",g]]),m=JSON.parse('{"path":"/zh/guide/q07ou7d9/","title":"通用文本数据处理算子","lang":"zh-CN","frontmatter":{"title":"通用文本数据处理算子","createTime":"2025/06/09 11:43:42","permalink":"/zh/guide/q07ou7d9/"},"readingTime":{"minutes":6.89,"words":2068},"git":{"createdTime":1749441278000,"updatedTime":1755783334000,"contributors":[{"name":"Sunnyhaze","username":"Sunnyhaze","email":"mxch1122@126.com","commits":2,"avatar":"https://avatars.githubusercontent.com/Sunnyhaze?v=4","url":"https://github.com/Sunnyhaze"},{"name":"Ma, Xiaochen","username":"","email":"mxch1122@126.com","commits":2,"avatar":"https://gravatar.com/avatar/c86bc98abf428aa442dfc12c76e70e324a551ebc637e5ed6634d60fbd3811221?d=retro"},{"name":"zzy1127","username":"zzy1127","email":"1726073424@qq.com","commits":10,"avatar":"https://avatars.githubusercontent.com/zzy1127?v=4","url":"https://github.com/zzy1127"},{"name":"Hao Liang","username":"","email":"hao.liang@stu.pku.edu.cn","commits":1,"avatar":"https://gravatar.com/avatar/105bae3e8661728b9f2f5440992b04f5f28459b66a049d09b52213ce1438f6bc?d=retro"},{"name":"wongzhenhao","username":"wongzhenhao","email":"zhenhao1141@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/wongzhenhao?v=4","url":"https://github.com/wongzhenhao"}]},"filePathRelative":"zh/notes/guide/general_operators/text_process_operators.md","headers":[]}');export{y as comp,m as data};
