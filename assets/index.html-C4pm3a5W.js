import{_ as a,c as t,b as n,o as s}from"./app-BqDkFDvD.js";const i={};function r(o,e){return s(),t("div",null,e[0]||(e[0]=[n('<h3 id="_1-planning-phase-planning-agent" tabindex="-1"><a class="header-anchor" href="#_1-planning-phase-planning-agent"><span>1. <strong>Planning Phase (Planning Agent)</strong></span></a></h3><ul><li><strong>Task Decomposition</strong>: <ul><li>Parse task objectives based on user input (such as natural language requirements, data characteristics, goals, etc.).</li><li>Decompose complex tasks into fine-grained subtasks to form a clear subtask list.</li></ul></li><li><strong>Define Task Chain</strong>: <ul><li>Organize subtasks into a task chain (pipeline) according to their dependencies.</li><li>If user requirements are clear, directly generate a standard task chain that meets the needs; otherwise, generate one through task reasoning.</li></ul></li></ul><h3 id="_2-tool-registration-phase-tool-register" tabindex="-1"><a class="header-anchor" href="#_2-tool-registration-phase-tool-register"><span>2. <strong>Tool Registration Phase (Tool Register)</strong></span></a></h3><ul><li><strong>Register Predefined Tools</strong>: <ul><li>Predefined tool library: includes operators for data sampling, cleaning, evaluation, generation, etc.</li><li>Dynamic tool generation: automatically register new tools by package scanning and operator description extraction (e.g., via <code>get_desc</code>).</li><li>Tool description vectorization: generate semantic representations of tools by combining functional descriptions, input/output types, sample data, etc., for subsequent retrieval and recommendation.</li></ul></li></ul><h3 id="_3-task-dispatch-phase-task-dispatcher" tabindex="-1"><a class="header-anchor" href="#_3-task-dispatch-phase-task-dispatcher"><span>3. <strong>Task Dispatch Phase (Task Dispatcher)</strong></span></a></h3><ul><li><strong>Assign Tasks to Agent</strong>: <ul><li>Distribute tasks to the corresponding agent sequentially or in parallel according to the task chain.</li><li>Provide context tracking for the task chain (e.g., using <code>sessionKEY</code> for multi-turn dialogue tracking).</li></ul></li></ul><h3 id="_4-task-execution-phase-execution-agent" tabindex="-1"><a class="header-anchor" href="#_4-task-execution-phase-execution-agent"><span>4. <strong>Task Execution Phase (Execution Agent)</strong></span></a></h3><ul><li><strong>Generate Tools</strong>: <ul><li>Dynamically write the required code for tasks (such as Python scripts) and debug the code.</li><li>During execution, automatically obtain task parameters (such as user input or the output of the previous task) and fill them into the code.</li><li>When parameters or context are missing, the Execution Agent will prompt the user for completion.</li></ul></li><li><strong>Process Tasks</strong>: <ul><li>Execute node operations within the task chain, including invoking predefined tools or dynamically generated tools.</li><li>Pass execution results in real-time to subsequent task nodes or return them to the user for review.</li></ul></li></ul><h3 id="_5-result-evaluation-phase-evaluation-agent" tabindex="-1"><a class="header-anchor" href="#_5-result-evaluation-phase-evaluation-agent"><span>5. <strong>Result Evaluation Phase (Evaluation Agent)</strong></span></a></h3><ul><li><strong>Debug and Validate</strong>: <ul><li>Perform syntax, logic, and data integrity checks on task execution results.</li><li>For code-based tasks, check whether the code execution results meet expectations (e.g., returning results in JSON format).</li></ul></li></ul><h3 id="_6-analysis-and-summary-phase-analysis-agent" tabindex="-1"><a class="header-anchor" href="#_6-analysis-and-summary-phase-analysis-agent"><span>6. <strong>Analysis and Summary Phase (Analysis Agent)</strong></span></a></h3><ul><li><strong>Summarize and Generate Report</strong>: <ul><li>Analyze the task execution process and results, generating highly readable reports.</li><li>Generate contextual summaries for multi-turn dialogues, helping users quickly review the overall execution of the task chain.</li></ul></li></ul>',12)]))}const c=a(i,[["render",r]]),u=JSON.parse('{"path":"/en/guide/agent/agent_for_data/","title":"DataFlow-Agent Data Preparation","lang":"en-US","frontmatter":{"title":"DataFlow-Agent Data Preparation","icon":"material-symbols:robot-2-outline","createTime":"2025/06/17 15:56:00","permalink":"/en/guide/agent/agent_for_data/"},"readingTime":{"minutes":1.22,"words":367},"git":{"createdTime":1750154453000,"updatedTime":1750154453000,"contributors":[{"name":"Hao Liang","username":"","email":"hao.liang@stu.pku.edu.cn","commits":1,"avatar":"https://gravatar.com/avatar/105bae3e8661728b9f2f5440992b04f5f28459b66a049d09b52213ce1438f6bc?d=retro"},{"name":"HeRunming","username":"HeRunming","email":"2100010636@stu.pku.edu.cn","commits":1,"avatar":"https://avatars.githubusercontent.com/HeRunming?v=4","url":"https://github.com/HeRunming"},{"name":"Ma, Xiaochen","username":"","email":"mxch1122@126.com","commits":1,"avatar":"https://gravatar.com/avatar/c86bc98abf428aa442dfc12c76e70e324a551ebc637e5ed6634d60fbd3811221?d=retro"}]},"filePathRelative":"en/notes/guide/agent/agent_for_data.md","headers":[]}');export{c as comp,u as data};
