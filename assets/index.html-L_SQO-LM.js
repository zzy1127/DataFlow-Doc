import{_ as e,c as i,b as s,o as a}from"./app-BqDkFDvD.js";const l={};function n(d,t){return a(),i("div",null,t[0]||(t[0]=[s(`<h2 id="ðŸ“˜-overview" tabindex="-1"><a class="header-anchor" href="#ðŸ“˜-overview"><span>ðŸ“˜ Overview</span></a></h2><p>The <code>DeitaComplexityFilter</code> is an operator designed to filter data based on complexity scores. It utilizes the Llama-based <code>DeitaComplexitySampleEvaluator</code> to assess the complexity of given instructions and retains only the data entries whose scores fall within a specified range <code>[min_score, max_score]</code>.</p><h2 id="init-function" tabindex="-1"><a class="header-anchor" href="#init-function"><span><code>__init__</code> function</span></a></h2><p><code>__init__(self, min_score=3.0, max_score=5.0, device=&#39;cuda&#39;, model_cache_dir=&#39;./dataflow_cache&#39;, max_length=512)</code></p><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Default</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>min_score</strong></td><td style="text-align:left;">float</td><td style="text-align:left;"><code>3.0</code></td><td style="text-align:left;">The minimum complexity score threshold. Data with scores below this value will be filtered out.</td></tr><tr><td style="text-align:left;"><strong>max_score</strong></td><td style="text-align:left;">float</td><td style="text-align:left;"><code>5.0</code></td><td style="text-align:left;">The maximum complexity score threshold. Data with scores above this value will be filtered out.</td></tr><tr><td style="text-align:left;"><strong>device</strong></td><td style="text-align:left;">str</td><td style="text-align:left;"><code>&#39;cuda&#39;</code></td><td style="text-align:left;">The device on which the complexity scoring model will run (e.g., &#39;cuda&#39;, &#39;cpu&#39;).</td></tr><tr><td style="text-align:left;"><strong>model_cache_dir</strong></td><td style="text-align:left;">str</td><td style="text-align:left;"><code>&#39;./dataflow_cache&#39;</code></td><td style="text-align:left;">The directory to store and cache the downloaded scoring model.</td></tr><tr><td style="text-align:left;"><strong>max_length</strong></td><td style="text-align:left;">int</td><td style="text-align:left;"><code>512</code></td><td style="text-align:left;">The maximum sequence length that the model can process.</td></tr></tbody></table><h3 id="prompt-template-descriptions" tabindex="-1"><a class="header-anchor" href="#prompt-template-descriptions"><span>Prompt Template Descriptions</span></a></h3><h2 id="run-function" tabindex="-1"><a class="header-anchor" href="#run-function"><span><code>run</code> function</span></a></h2><p><code>run(self, storage: DataFlowStorage, input_instruction_key: str = &#39;instruction&#39;, input_output_key : str = &#39;output&#39;, output_key: str = &quot;DeitaComplexityScore&quot;)</code></p><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Default</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>storage</strong></td><td style="text-align:left;">DataFlowStorage</td><td style="text-align:left;">Required</td><td style="text-align:left;">The DataFlow storage instance used for reading the input DataFrame and writing the filtered output.</td></tr><tr><td style="text-align:left;"><strong>input_instruction_key</strong></td><td style="text-align:left;">str</td><td style="text-align:left;"><code>&#39;instruction&#39;</code></td><td style="text-align:left;">The name of the column in the input data containing the instruction text to be evaluated.</td></tr><tr><td style="text-align:left;"><strong>input_output_key</strong></td><td style="text-align:left;">str</td><td style="text-align:left;"><code>&#39;output&#39;</code></td><td style="text-align:left;">The name of the column in the input data containing the corresponding output/response text.</td></tr><tr><td style="text-align:left;"><strong>output_key</strong></td><td style="text-align:left;">str</td><td style="text-align:left;"><code>&#39;DeitaComplexityScore&#39;</code></td><td style="text-align:left;">The name of the new column that will be added to the DataFrame to store the calculated complexity score.</td></tr></tbody></table><h2 id="ðŸ§ -example-usage" tabindex="-1"><a class="header-anchor" href="#ðŸ§ -example-usage"><span>ðŸ§  Example Usage</span></a></h2><h4 id="ðŸ§¾-output-format" tabindex="-1"><a class="header-anchor" href="#ðŸ§¾-output-format"><span>ðŸ§¾ Output Format</span></a></h4><p>The operator adds a new column (default name <code>DeitaComplexityScore</code>) to the input data and filters the rows based on the score.</p><table><thead><tr><th style="text-align:left;">Field</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">instruction</td><td style="text-align:left;">str</td><td style="text-align:left;">The input instruction text.</td></tr><tr><td style="text-align:left;">output</td><td style="text-align:left;">str</td><td style="text-align:left;">The input response text.</td></tr><tr><td style="text-align:left;">DeitaComplexityScore</td><td style="text-align:left;">float</td><td style="text-align:left;">The calculated complexity score for the instruction.</td></tr></tbody></table><p>Example Input:</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">instruction</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Explain the theory of relativity in simple terms.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">output</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">The theory of relativity, developed by Albert Einstein, is split into two parts: special relativity and general relativity. Special relativity deals with the relationship between space and time for objects moving at constant speeds. A key idea is that the speed of light is constant for all observers. General relativity is a theory of gravitation, suggesting that gravity is the curvature of spacetime caused by mass and energy.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example Output (assuming default <code>min_score=3.0</code>, <code>max_score=5.0</code> and a calculated score of 4.2):</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">instruction</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Explain the theory of relativity in simple terms.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">output</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">The theory of relativity, developed by Albert Einstein, is split into two parts: special relativity and general relativity. Special relativity deals with the relationship between space and time for objects moving at constant speeds. A key idea is that the speed of light is constant for all observers. General relativity is a theory of gravitation, suggesting that gravity is the curvature of spacetime caused by mass and energy.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">DeitaComplexityScore</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4.2</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17)]))}const o=e(l,[["render",n]]),h=JSON.parse('{"path":"/en/api/operators/text_sft/filter/deitacomplexityfilter/","title":"DeitaComplexityFilter","lang":"en-US","frontmatter":{"title":"DeitaComplexityFilter","createTime":"2025/10/09 16:52:48","permalink":"/en/api/operators/text_sft/filter/deitacomplexityfilter/"},"readingTime":{"minutes":1.57,"words":471},"git":{"createdTime":1760001305000,"updatedTime":1760001305000,"contributors":[{"name":"Hao Liang","username":"","email":"hao.liang@stu.pku.edu.cn","commits":1,"avatar":"https://gravatar.com/avatar/105bae3e8661728b9f2f5440992b04f5f28459b66a049d09b52213ce1438f6bc?d=retro"}]},"filePathRelative":"en/notes/api/operators/text_sft/filter/DeitaComplexityFilter.md","headers":[]}');export{o as comp,h as data};
