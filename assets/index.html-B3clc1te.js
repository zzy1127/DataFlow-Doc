import{_ as s,c as a,b as e,o as n}from"./app-BqDkFDvD.js";const t={};function r(l,i){return n(),a("div",null,i[0]||(i[0]=[e(`<p>因为Dataflow中有大量基于不同Python库，不同依赖的开发的算子。如果解释器一次性import所有算子和对应依赖，会带来极大的负载压力。而且随着未来各种库的增多，可能会有一些库是互斥的。所以<code>Lazyload</code>懒加载是必要的。懒加载，即只在算子被import的时候加载的时候import其所有的依赖。</p><p>感谢<a href="https://github.com/MOLYHECI" target="_blank" rel="noopener noreferrer">Zimo Meng</a>实现了自动识别语法树的lazyloader，并可以被VSCode正常高亮。开发新算子的时候，除了正常的写算子逻辑的python脚本，还需要注意写入必要的import以保证<code>Dataflow</code>框架能正常索引到对应的文件并import。</p><p>具体来说，参考这个最基础的<code>PromptedGenerator</code>算子：<a href="https://github.com/OpenDCAI/DataFlow/blob/main/dataflow/operators/generate/GeneralText/prompted_generator.py" target="_blank" rel="noopener noreferrer">链接</a></p><p>当实现了其逻辑后，需要在其上一级的<code>dataflow/operators/generate/__init__.py</code>文件中，添加在如下位置并做好对应注释：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> TYPE_CHECKING</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # GeneralText</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    from</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> .</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">GeneralText</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">pretrain_generator </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> PretrainGenerator</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    from</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> .</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">GeneralText</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">condor_generator </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> CondorGenerator</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    from</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> .</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">GeneralText</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">prompted_generator </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> PromptedGenerator  </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 像这样加在这里</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # Reasoning  </span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请务必按照上述格式，不要添加其他位置的<code>from xxxx import *</code>，以免失去<code>懒加载</code>的能力。</p>`,6)]))}const p=s(t,[["render",r]]),d=JSON.parse('{"path":"/zh/dev_guide/lazy_loader/","title":"必看-基于lazy_loader的算子开发","lang":"zh-CN","frontmatter":{"title":"必看-基于lazy_loader的算子开发","createTime":"2025/07/12 17:35:02","permalink":"/zh/dev_guide/lazy_loader/"},"readingTime":{"minutes":1.08,"words":325},"git":{"createdTime":1752314198000,"updatedTime":1752564709000,"contributors":[{"name":"Sunnyhaze","username":"Sunnyhaze","email":"mxch1122@126.com","commits":1,"avatar":"https://avatars.githubusercontent.com/Sunnyhaze?v=4","url":"https://github.com/Sunnyhaze"},{"name":"zzy1127","username":"zzy1127","email":"1726073424@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/zzy1127?v=4","url":"https://github.com/zzy1127"}]},"filePathRelative":"zh/notes/dev_guide/lazy_loader.md","headers":[]}');export{p as comp,d as data};
