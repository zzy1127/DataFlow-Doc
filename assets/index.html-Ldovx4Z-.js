import{_ as e,c as i,b as a,o as s}from"./app-BqDkFDvD.js";const n={};function r(l,t){return s(),i("div",null,t[0]||(t[0]=[a('<h2 id="ðŸ“˜-reasoninganswerpipelinerootfilter" tabindex="-1"><a class="header-anchor" href="#ðŸ“˜-reasoninganswerpipelinerootfilter"><span>ðŸ“˜ ReasoningAnswerPipelineRootFilter</span></a></h2><p><code>ReasoningAnswerPipelineRootFilter</code> is the root node of the answer processing pipeline. It is responsible for distributing the input data to different processing branches based on whether a ground truth (GT) label is present.</p><h2 id="init" tabindex="-1"><a class="header-anchor" href="#init"><span><code>__init__</code></span></a></h2><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">__init__</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="init-parameters" tabindex="-1"><a class="header-anchor" href="#init-parameters"><span>init Parameters</span></a></h3><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Default</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>-</strong></td><td style="text-align:left;">-</td><td style="text-align:left;">-</td><td style="text-align:left;">No parameters.</td></tr></tbody></table><h3 id="prompt-template-descriptions" tabindex="-1"><a class="header-anchor" href="#prompt-template-descriptions"><span>Prompt Template Descriptions</span></a></h3><h2 id="run" tabindex="-1"><a class="header-anchor" href="#run"><span><code>run</code></span></a></h2><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> storage</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> input_answer_key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">output</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> input_gt_key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">golden_answer</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This function executes the main logic of the operator. It reads a DataFrame, splits it into two based on the presence of a ground truth key, and writes them back to storage.</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Default</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>storage</strong></td><td style="text-align:left;">DataFlowStorage</td><td style="text-align:left;">Required</td><td style="text-align:left;">The DataFlow storage instance for reading and writing data.</td></tr><tr><td style="text-align:left;"><strong>input_answer_key</strong></td><td style="text-align:left;">str</td><td style="text-align:left;">&quot;output&quot;</td><td style="text-align:left;">The column name for the model&#39;s generated answer.</td></tr><tr><td style="text-align:left;"><strong>input_gt_key</strong></td><td style="text-align:left;">str</td><td style="text-align:left;">&quot;golden_answer&quot;</td><td style="text-align:left;">The column name for the ground truth (GT) label, used to split the data.</td></tr></tbody></table><h2 id="ðŸ§ -example-usage" tabindex="-1"><a class="header-anchor" href="#ðŸ§ -example-usage"><span>ðŸ§  Example Usage</span></a></h2><h4 id="ðŸ§¾-default-output-format-output-format" tabindex="-1"><a class="header-anchor" href="#ðŸ§¾-default-output-format-output-format"><span>ðŸ§¾ Default Output Format (Output Format)</span></a></h4><p>This operator splits the input data into two potential output files, preserving the original schema.</p><ul><li><strong>Output with GT</strong>: A file containing rows where the <code>input_gt_key</code> column has a valid value.</li><li><strong>Output without GT</strong>: A file containing rows where the <code>input_gt_key</code> column is missing or empty. In this output, the <code>input_gt_key</code> column is added and set to <code>None</code>.</li></ul>',16)]))}const h=e(n,[["render",r]]),d=JSON.parse('{"path":"/en/api/operators/reasoning/filter/reasoninganswerpipelinerootfilter/","title":"ReasoningAnswerPipelineRootFilter","lang":"en-US","frontmatter":{"title":"ReasoningAnswerPipelineRootFilter","createTime":"2025/10/09 16:52:48","permalink":"/en/api/operators/reasoning/filter/reasoninganswerpipelinerootfilter/"},"readingTime":{"minutes":0.7,"words":209},"git":{"createdTime":1760001305000,"updatedTime":1760001305000,"contributors":[{"name":"Hao Liang","username":"","email":"hao.liang@stu.pku.edu.cn","commits":1,"avatar":"https://gravatar.com/avatar/105bae3e8661728b9f2f5440992b04f5f28459b66a049d09b52213ce1438f6bc?d=retro"}]},"filePathRelative":"en/notes/api/operators/reasoning/filter/ReasoningAnswerPipelineRootFilter.md","headers":[]}');export{h as comp,d as data};
